{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;}
{\*\expandedcolortbl;;\cssrgb\c100000\c12195\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 PSEUDOCODE FOR ISLANDED MAZE
\f1\b0 \
\
Essentially the same as unislanded maze except the mouse needs a way of identifying whether it has already been down a certain path (like adding a wall or leaving a trail)\
\
Then, when the mouse reaches another intersection, it can detect whether that sign is there\
\
If the sign is present in both directions, then the mouse should just turn right\
\
The logic to check if the mouse is in the end square remains the same because that part won\'92t be any different from unislanded to islanded mazes\
\
In code the studentAI() function will look like this (changes from unislanded solution are in red):\
\

\f2     \cf2 if (isMarkPresentRight() && isMarkPresentLeft()) \{\
        turnRight();\
    \}\cf0 \
    \cf2 else \cf0 if (!isWallRight() \cf2 && !isMarkPresentRight()\cf0 ) \{\cf2  \cf0 \
        turnRight();\
    \}\
    else \{\
        if (isWallForward() && !isWallLeft() \cf2 && !isMarkPresentLeft()\cf0 ) \{\
            turnLeft();\
        \}\
        else if (isWallForward() && isWallLeft() && isWallRight()) \{\
            turnLeft();\
            turnLeft();\
        \}\
    \}\
\
    moveForward();\
    \cf2 addMark();\cf0 \
\
    if (!isWallLeft() && isWallRight() && !isWallForward()) \{\
        for (int i = 0; i < 3; i++) \{\
            moveForward();\
            turnLeft();\
\
            if (!(!isWallLeft() && isWallRight() && !isWallForward())) \{\
                turnLeft();\
                if (i == 0) \{\
                    for (int j = i; j != -1; j--) \{\
                        moveForward();\
                        turnLeft();\
                    \}\
                    turnLeft();\
                \}\
                else \{\
                    for (int j = i; j != -1; j--) \{\
                        moveForward();\
                        turnRight();\
                    \}\
                    turnRight();\
                \}\
                break;\
            \}\
\
            if (i == 2) \{\
                foundFinish();\
            \}\
        \}\
    \}\
\
    else if (isWallLeft() && !isWallRight() && !isWallForward()) \{\
        for (int i = 0; i < 3; i++) \{\
            moveForward();\
            turnRight();\
\
            if (!(isWallLeft() && !isWallRight() && !isWallForward())) \{\
                turnRight();\
                if (i == 0) \{\
                    for (int j = i; j != -1; j--) \{\
                        moveForward();\
                        turnRight();\
                    \}\
                    turnRight();\
                \}\
                else \{\
                    for (int j = i; j != -1; j--) \{\
                        moveForward();\
                        turnLeft();\
                    \}\
                    turnLeft();\
                \}\
                break;\
            \}\
\
            if (i == 2) \{\
                foundFinish();\
            \}\
        \}\
    \}\
\}\
}